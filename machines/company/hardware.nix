# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "usbhid" "rtsx_usb_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # use GRUB2 as boot loader
  boot.loader.grub = {
    enable = true;
    device = "nodev";
    efiSupport = true;
  };

  fileSystems."/" =
    { device = "/dev/disk/by-label/nixos";
      fsType = "ext4";
    };

  # Mount ESP to /boot/efi instead of /boot
  # Ref: https://nixos.wiki/wiki/Bootloader#Limiting_amount_of_entries_with_grub_or_systemd-boot
  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-label/boot";
      fsType = "vfat";
    };

  # In this case, we should also set the boot.loader.efi.efiSysMountPoint to /boot/efi as well.
  boot.loader.efi.efiSysMountPoint = "/boot/efi";
  # In this case boot.loader.efi.canTouchEfiVariables not work with removable ESP
  boot.loader.grub.efiInstallAsRemovable = true;

  fileSystems."/mnt/data" =
    { device = "/dev/disk/by-label/Data";
      fsType = "ext4";
    };

  # Windows Share
  fileSystems."/mnt/smbmount" =
    { device = config.sops.samba_credencials.device;
      fsType = "cifs";
      options =
        [
          "vers=3.0"
          "file_mode=0777"
          "dir_mode=0777"
        ]
        # Credentials
        ++ config.sops.samba_credencials.options;
    };

  swapDevices =
    [
      # create a 8 GB swap file
      { device = "/swapfile"; size = 8 * 1024; }
      # also use a swap partition
      { device = "/dev/disk/by-label/swap"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
